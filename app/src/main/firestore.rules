rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isGroupAdmin(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      let members = group.data.members;
      return members[request.auth.uid].isAdmin == true;
    }

    function isGroupMember(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return request.auth.uid in group.data.memberIds;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading any user document and querying by email for friend requests
      allow read: if request.auth != null;
      
      // Allow querying users by email for friend requests
      allow list: if request.auth != null && 
                  request.query.limit <= 10 && // Limit query size
                  request.query.filters.size() == 1 && // Only one filter
                  'email' in request.query.filters; // Must filter by email field
      
      // Allow users to create and update their own data
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups collection rules
    match /groups/{groupId} {
      // Allow reading groups where user is a member OR if they have a valid invitation
      allow read: if request.auth != null && (
        resource == null || // Allow reading non-existent documents
        request.auth.uid in resource.data.memberIds ||
        // Temporarily allow reading for invite acceptance (this will be removed once invite acceptance works)
        true
      );
      
      // Allow listing groups where user is a member
      allow list: if request.auth != null;
      
      // Allow creating groups (creator becomes admin)
      allow create: if request.auth != null && 
                   request.resource.data.createdBy == request.auth.uid &&
                   request.auth.uid in request.resource.data.memberIds &&
                   request.resource.data.members[request.auth.uid].isAdmin == true;
      
      // Allow updates if user is group admin OR if user is being added to the group (invite acceptance)
      allow update: if request.auth != null && (
        isGroupAdmin(groupId) ||
        // Allow member updates when accepting invites (user will be added to memberIds)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberIds']) &&
          (
            request.auth.uid in request.resource.data.memberIds ||
            // Allow if user is being added to the group (invite acceptance)
            (
              request.auth.uid in request.resource.data.memberIds &&
              request.auth.uid in resource.data.memberIds == false
            )
          )
        )
      );
      
      // Allow deletion if user is group admin
      allow delete: if request.auth != null && isGroupAdmin(groupId);
    }

    // Expenses collection rules
    match /expenses/{expenseId} {
      // Helper to fetch groupId depending on operation (create/update vs read/delete)
      function expenseGroupId() {
        // During create/update use the incoming document, otherwise use stored doc
        return (request.method == 'create' || request.method == 'update') ?
               request.resource.data.groupId : resource.data.groupId;
      }

      // A user can read an expense only if they are a member of the related group
      allow read: if request.auth != null && isGroupMember(expenseGroupId());

      // Only group members may create an expense document
      allow create: if request.auth != null && isGroupMember(expenseGroupId());

      // Updates allowed when:
      //  1. User is the creator of the expense (paidBy) OR
      //  2. User is admin of the group
      allow update: if request.auth != null && (
                    (request.auth.uid == resource.data.createdBy) ||
                    isGroupAdmin(expenseGroupId()) );

      // Deletion restricted to group admins
      allow delete: if request.auth != null && isGroupAdmin(expenseGroupId());
    }

    // Settlements collection rules
    match /settlements/{settlementId} {
      // During create we must rely on the incoming document for groupId
      function settleGroupId() {
        return (request.method == 'create') ? request.resource.data.groupId : resource.data.groupId;
      }

      // Only group members can read settlements for their group
      allow read: if request.auth != null && isGroupMember(settleGroupId());
      
      // Settlement creation allowed when:
      // 1. User is a group member AND
      // 2. User is either the payer or payee of the settlement
      allow create: if request.auth != null && 
        isGroupMember(settleGroupId()) &&
        (request.auth.uid == request.resource.data.payerId || 
         request.auth.uid == request.resource.data.payeeId) &&
        request.resource.data.createdBy == request.auth.uid;

      // Updates & deletes allowed to settlement creator or group admin
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || isGroupAdmin(settleGroupId()));
    }

    // Group summaries collection (read-only for clients)
    match /group_summaries/{groupId} {
      // Allow group members to read summary; no client writes permitted
      allow read: if request.auth != null && isGroupMember(groupId);
      allow write: if false;
    }

    // Global list-query guard (apply on root collections)
    match /{collection}/{document=**} {
      allow list: if request.auth != null && request.query.limit <= 50;
    }

    // Group join requests collection rules
    match /groupJoinRequests/{requestId} {
      // Allow all operations for authenticated users (temporarily)
      allow read, write: if request.auth != null;
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                  request.auth.uid == resource.data.recipientId;
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.recipientId &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      allow list: if request.auth != null && 
                  request.query.filters.size() <= 2 &&
                  'recipientId' in request.query.filters &&
                  request.query.filters.recipientId == request.auth.uid;
    }

    // Group invites collection rules
    match /groupInvites/{inviteId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && isGroupAdmin(request.resource.data.groupId);
      allow update: if request.auth != null && (
        resource.data.inviteeEmail == request.auth.token.email ||
        resource.data.inviterId == request.auth.uid
      );
    }

    // Friends collection rules
    match /friends/{friendId} {
      allow read, list: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.friendId == request.auth.uid
      );
      allow create, write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.friendId == request.auth.uid
      );
    }

    // Friend requests collection rules
    match /friendRequests/{requestId} {
      // Helper function to check if user is involved in request
      function isInvolvedInRequest() {
        return request.auth.uid == resource.data.senderId ||
               request.auth.uid == resource.data.receiverId;
      }

      // Helper function to validate status
      function isValidStatus() {
        return request.resource.data.status in ['PENDING', 'ACCEPTED', 'BLOCKED'];
      }

      // Allow reading friend requests they're involved in
      allow read: if request.auth != null && (
        (resource == null) || // Allow reading non-existent documents
        isInvolvedInRequest()
      );
      
      // Allow listing friend requests with compound queries
      allow list: if request.auth != null;
      
      // Allow creating friend requests if user is the sender
      allow create: if request.auth != null && 
                   request.resource.data.senderId == request.auth.uid &&
                   request.resource.data.status == 'PENDING' &&
                   isValidStatus();
      
      // Allow updating friend requests if user is the receiver
      allow update: if request.auth != null && 
                   resource.data.receiverId == request.auth.uid &&
                   isValidStatus();
      
      // Allow deleting friend requests if user is either sender or receiver
      allow delete: if request.auth != null && isInvolvedInRequest();
    }

    // Blocked users collection rules
    match /blockedUsers/{blockId} {
      allow read, list: if request.auth != null && 
                         request.auth.uid == resource.data.blockedBy;
      allow create: if request.auth != null && 
                   request.resource.data.blockedBy == request.auth.uid;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.blockedBy;
    }

    // User reports collection rules
    match /userReports/{reportId} {
      allow read, list: if request.auth != null && 
                         request.auth.uid == resource.data.reportedBy;
      allow create: if request.auth != null && 
                   request.resource.data.reportedBy == request.auth.uid;
      // Only allow reading own reports, admins would handle moderation elsewhere
    }

    // Friend groups collection rules
    match /friendGroups/{groupId} {
      allow read, list: if request.auth != null && 
                         request.auth.uid == resource.data.createdBy;
      allow create: if request.auth != null && 
                   request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.createdBy &&
                   resource.data.isDefault != true; // Cannot delete default groups
    }

    // Friend group memberships collection rules
    match /friendGroupMemberships/{membershipId} {
      allow read, list: if request.auth != null && 
                         request.auth.uid == resource.data.addedBy;
      allow create: if request.auth != null && 
                   request.resource.data.addedBy == request.auth.uid;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.addedBy;
    }
  }
} 