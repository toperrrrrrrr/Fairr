rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isGroupAdmin(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      let members = group.data.members;
      return members[request.auth.uid].isAdmin == true;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading any user document and querying by email for friend requests
      allow read: if request.auth != null;
      
      // Allow querying users by email for friend requests
      allow list: if request.auth != null && 
                  request.query.limit <= 10 && // Limit query size
                  request.query.filters.size() == 1 && // Only one filter
                  request.query.filters[0].field_path == 'email'; // Must filter by email field
      
      // Allow users to create and update their own data
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups collection rules
    match /groups/{groupId} {
      // Allow reading groups where user is a member (using memberIds array)
      allow read, list: if request.auth != null && 
                       (request.auth.uid in resource.data.memberIds);
      
      // Allow creating groups (creator becomes admin)
      allow create: if request.auth != null && 
                   request.resource.data.createdBy == request.auth.uid &&
                   request.auth.uid in request.resource.data.memberIds;
      
      // Allow updates if user is group admin
      allow update: if request.auth != null && 
                   isGroupAdmin(groupId);
      
      // Allow deletion if user is group admin
      allow delete: if request.auth != null && 
                   isGroupAdmin(groupId);
    }

    // Expenses collection rules
    match /expenses/{expenseId} {
      // Allow reading expenses if user is a member of the group
      allow read: if request.auth != null;
      
      // Allow creating expenses if user is a member of the group
      allow create: if request.auth != null;
      
      // Allow updating expenses if user created them or is group admin
      allow update: if request.auth != null;
      
      // Allow deleting expenses if user is group admin
      allow delete: if request.auth != null && 
                   isGroupAdmin(resource.data.groupId);
    }

    // Friends collection rules
    match /friends/{friendId} {
      allow read, list: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.friendId == request.auth.uid
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.friendId == request.auth.uid
      );
      allow write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.friendId == request.auth.uid
      );
    }

    // Friend requests collection rules
    match /friendRequests/{requestId} {
      // Helper function to check if user is involved in request
      function isInvolvedInRequest() {
        return request.auth.uid == resource.data.senderId ||
               request.auth.uid == resource.data.receiverId;
      }

      // Helper function to validate status
      function isValidStatus() {
        return request.resource.data.status in ['PENDING', 'ACCEPTED', 'BLOCKED'];
      }

      // Allow reading friend requests they're involved in
      allow read: if request.auth != null && (
        (resource == null) || // Allow reading non-existent documents
        isInvolvedInRequest()
      );
      
      // Allow listing friend requests with compound queries
      allow list: if request.auth != null && (
        // For querying pending requests
        (request.query.filters.size() == 2 &&
         'receiverId' in request.query.filters &&
         request.query.filters.receiverId == request.auth.uid &&
         'status' in request.query.filters) ||
        // For other queries where user is involved
        (resource != null && isInvolvedInRequest())
      );
      
      // Allow creating friend requests if user is the sender
      allow create: if request.auth != null && 
                   request.resource.data.senderId == request.auth.uid &&
                   request.resource.data.status == 'PENDING' &&
                   isValidStatus();
      
      // Allow updating friend requests if user is the receiver
      allow update: if request.auth != null && 
                   resource.data.receiverId == request.auth.uid &&
                   isValidStatus();
      
      // Allow deleting friend requests if user is either sender or receiver
      allow delete: if request.auth != null && isInvolvedInRequest();
    }
  }
} 