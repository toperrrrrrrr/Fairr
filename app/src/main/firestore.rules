rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Allow reading any user document for friend requests and group operations
      allow read: if request.auth != null;
      
      // Allow users to create and update their own data
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups collection rules
    match /groups/{groupId} {
      // Allow reading groups where user is a member
      allow read: if request.auth != null && (
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid))
      );
      
      // Allow creating groups (creator becomes admin)
      allow create: if request.auth != null && 
        request.resource.data.creatorId == request.auth.uid;
      
      // Allow updates if user is group admin
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid;

      // Members subcollection rules
      match /members/{memberId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid;
      }
    }

    // Expenses collection rules
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null;
    }

    // Friends collection rules
    match /friends/{friendId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.friendId == request.auth.uid
      );
      allow write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.friendId == request.auth.uid
      );
    }

    // Friend requests collection rules
    match /friendRequests/{requestId} {
      // Allow reading friend requests they're involved in
      allow read: if request.auth != null;
      
      // Allow creating friend requests if user is the sender
      allow create: if request.auth != null && 
                   request.resource.data.senderId == request.auth.uid;
      
      // Allow update/delete if user is either sender or receiver
      allow update, delete: if request.auth != null && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }
  }
} 