package com.example.fairr.ui.screens.groups

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.fairr.ui.theme.*

// Data classes
data class GroupDetail(
    val id: String,
    val name: String,
    val description: String,
    val memberCount: Int,
    val totalExpenses: Double,
    val yourBalance: Double,
    val currency: String,
    val members: List<Member>
)

data class Member(
    val id: String,
    val name: String,
    val balance: Double
)

data class ExpenseItem(
    val id: String,
    val description: String,
    val amount: Double,
    val paidBy: String,
    val date: String
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GroupDetailScreen(
    navController: NavController,
    groupId: String,
    onNavigateToAddExpense: () -> Unit = {}
) {
    // Sample group data
    val group = remember {
        GroupDetail(
            id = groupId,
            name = "Weekend Trip",
            description = "Mountain hiking adventure",
            memberCount = 4,
            totalExpenses = 650.0,
            yourBalance = -125.75,
            currency = "$",
            members = listOf(
                Member("1", "John Doe", -125.75),
                Member("2", "Jane Smith", 50.25),
                Member("3", "Mike Johnson", 0.0),
                Member("4", "Sarah Wilson", 75.50)
            )
        )
    }


    val expenses = remember {
        listOf(
            ExpenseItem("1", "Lunch at Mountain Cafe", 80.0, "John Doe", "12/28"),
            ExpenseItem("2", "Gas for Car", 45.50, "Jane Smith", "12/27"),
            ExpenseItem("3", "Accommodation", 200.0, "Mike Johnson", "12/26"),
            ExpenseItem("4", "Groceries", 65.25, "Sarah Wilson", "12/26")
        )
    }

    var showGroupMenu by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        group.name,
                        fontWeight = FontWeight.SemiBold,
                        color = TextPrimary
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(
                            Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Back",
                            tint = TextPrimary
                        )
                    }
                },
                actions = {
                    Box {
                        IconButton(onClick = { showGroupMenu = true }) {
                            Icon(
                                Icons.Default.MoreVert,
                                contentDescription = "Options",
                                tint = TextSecondary
                            )
                        }
                        
                        DropdownMenu(
                            expanded = showGroupMenu,
                            onDismissRequest = { showGroupMenu = false }
                        ) {
                            DropdownMenuItem(
                                text = { Text("Group Settings") },
                                onClick = {
                                    showGroupMenu = false
                                    // Navigate to group settings
                                    navController.navigate("group_settings/$groupId")
                                },
                                leadingIcon = {
                                    Icon(Icons.Default.Settings, contentDescription = null)
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("View Analytics") },
                                onClick = {
                                    showGroupMenu = false
                                    navController.navigate("analytics")
                                },
                                leadingIcon = {
                                    Icon(Icons.Default.Analytics, contentDescription = null)
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("Export Data") },
                                onClick = {
                                    showGroupMenu = false
                                    navController.navigate("export_data/$groupId")
                                },
                                leadingIcon = {
                                    Icon(Icons.Default.Download, contentDescription = null)
                                }
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = PureWhite
                )
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = { onNavigateToAddExpense() },
                containerColor = DarkGreen,
                contentColor = PureWhite,
                shape = CircleShape
            ) {
                Icon(Icons.Default.Add, contentDescription = "Add Expense")
            }
        }
    ) { padding ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .background(LightBackground)
                .padding(padding),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                Spacer(modifier = Modifier.height(8.dp))
            }
            
            // Group Summary Card
            item {
                GroupSummaryCard(
                    group = group,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // Your Balance Card
            item {
                BalanceCard(
                    balance = group.yourBalance,
                    currency = group.currency,
                    navController = navController,
                    groupId = groupId,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // Members Section
            item {
                Text(
                    text = "Members",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = TextPrimary,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            items(group.members) { member ->
                MemberCard(
                    member = member,
                    currency = group.currency,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            // Recent Expenses Section
            item {
                Text(
                    text = "Recent Expenses",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = TextPrimary,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
            }
            
            items(expenses) { expense ->
                ExpenseCard(
                    expense = expense,
                    currency = group.currency,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
                Spacer(modifier = Modifier.height(8.dp))
            }
            
            item {
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }
}

@Composable
fun GroupSummaryCard(
    group: GroupDetail,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(1.dp, RoundedCornerShape(16.dp)),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = PureWhite)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = group.description,
                fontSize = 14.sp,
                color = TextSecondary,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        Icons.Default.Group,
                        contentDescription = "Members",
                        tint = TextSecondary,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "${group.memberCount} members",
                        fontSize = 12.sp,
                        color = TextSecondary
                    )
                }
                
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        Icons.Default.Receipt,
                        contentDescription = "Total Expenses",
                        tint = TextSecondary,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "${group.currency}${String.format("%.2f", group.totalExpenses)}",
                        fontSize = 12.sp,
                        color = TextSecondary,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
}

@Composable
fun BalanceCard(
    balance: Double,
    currency: String,
    navController: NavController,
    groupId: String,
    modifier: Modifier = Modifier
) {
    val isOwed = balance < 0
    val balanceColor = if (isOwed) ErrorRed else SuccessGreen
    
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(1.dp, RoundedCornerShape(16.dp)),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = PureWhite)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column {
                Text(
                    text = if (isOwed) "You owe" else "You are owed",
                    fontSize = 14.sp,
                    color = TextSecondary,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = "$currency${String.format("%.2f", kotlin.math.abs(balance))}",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = balanceColor
                )
            }
            
            if (isOwed) {
                Button(
                    onClick = { 
                        navController.navigate("settlement/$groupId")
                    },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = ErrorRed,
                        contentColor = PureWhite
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(
                        "Settle Up",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
}

@Composable
fun MemberCard(
    member: Member,
    currency: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(1.dp, RoundedCornerShape(12.dp)),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = PureWhite)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Avatar
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .background(
                        color = DarkGreen.copy(alpha = 0.1f),
                        shape = CircleShape
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = member.name.split(" ").map { it.first() }.joinToString(""),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = DarkGreen
                )
            }
            
            Spacer(modifier = Modifier.width(12.dp))
            
            // Name and status
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = member.name,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = TextPrimary
                )
                Text(
                    text = when {
                        member.balance > 0 -> "gets back"
                        member.balance < 0 -> "owes"
                        else -> "settled up"
                    },
                    fontSize = 12.sp,
                    color = TextSecondary
                )
            }
            
            // Balance
            Column(horizontalAlignment = Alignment.End) {
                val balanceColor = when {
                    member.balance > 0 -> SuccessGreen
                    member.balance < 0 -> ErrorRed
                    else -> TextSecondary
                }
                
                Text(
                    text = when {
                        member.balance > 0 -> "+$currency${String.format("%.2f", member.balance)}"
                        member.balance < 0 -> "-$currency${String.format("%.2f", kotlin.math.abs(member.balance))}"
                        else -> "$currency${String.format("%.2f", 0.0)}"
                    },
                    fontSize = 14.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = balanceColor
                )
            }
        }
    }
}

@Composable
fun ExpenseCard(
    expense: ExpenseItem,
    currency: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(1.dp, RoundedCornerShape(12.dp)),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = PureWhite)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = expense.description,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = TextPrimary
                )
                Text(
                    text = "Paid by ${expense.paidBy} • ${expense.date}",
                    fontSize = 12.sp,
                    color = TextSecondary
                )
            }
            
            Text(
                text = "$currency${String.format("%.2f", expense.amount)}",
                fontSize = 16.sp,
                fontWeight = FontWeight.SemiBold,
                color = TextPrimary
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun GroupDetailScreenPreview() {
    val sampleGroup = GroupDetail(
        id = "1",
        name = "Roommates",
        description = "Apartment expenses",
        memberCount = 4,
        totalExpenses = 1250.0,
        yourBalance = -125.50,
        currency = "$",
        members = listOf(
            Member("1", "You", -125.50),
            Member("2", "Alex", 75.25),
            Member("3", "Jamie", 50.25),
            Member("4", "Taylor", 0.0)
        )
    )
    
    FairrTheme {
        GroupDetailScreen(
            navController = rememberNavController(),
            groupId = "1"
        )
    }
}
