package com.example.fairr.ui.screens.settlements

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.fairr.data.settlements.EnhancedSettlementService
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

data class EnhancedSettlementState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val settlementSummary: EnhancedSettlementService.SettlementSummary? = null,
    val userBalances: List<EnhancedSettlementService.UserBalance> = emptyList(),
    val settlements: List<EnhancedSettlementService.SettlementTransaction> = emptyList(),
    val statistics: Map<String, Any> = emptyMap()
)

@HiltViewModel
class EnhancedSettlementViewModel @Inject constructor(
    private val settlementService: EnhancedSettlementService
) : ViewModel() {

    private val _state = MutableStateFlow(EnhancedSettlementState())
    val state: StateFlow<EnhancedSettlementState> = _state

    fun loadSettlements(groupId: String) {
        viewModelScope.launch {
            try {
                _state.update { it.copy(isLoading = true, error = null) }
                
                val summary = settlementService.calculateSettlements(groupId)
                if (summary != null) {
                    val statistics = settlementService.getSettlementStatistics(groupId)
                    
                    _state.update { 
                        it.copy(
                            isLoading = false,
                            settlementSummary = summary,
                            userBalances = summary.userBalances,
                            settlements = summary.settlements,
                            statistics = statistics
                        ) 
                    }
                } else {
                    _state.update { 
                        it.copy(
                            isLoading = false,
                            error = "Failed to load settlements"
                        ) 
                    }
                }
                
            } catch (e: Exception) {
                _state.update { 
                    it.copy(
                        isLoading = false, 
                        error = e.message ?: "Failed to load settlements"
                    ) 
                }
            }
        }
    }

    fun refreshSettlements(groupId: String) {
        loadSettlements(groupId)
    }

    fun markSettlementCompleted(
        groupId: String,
        settlement: EnhancedSettlementService.SettlementTransaction
    ) {
        viewModelScope.launch {
            try {
                val success = settlementService.markSettlementCompleted(
                    groupId,
                    settlement.fromUserId,
                    settlement.toUserId,
                    settlement.amount
                )
                
                if (success) {
                    // Reload settlements after marking as completed
                    loadSettlements(groupId)
                }
                
            } catch (e: Exception) {
                _state.update { 
                    it.copy(error = e.message ?: "Failed to mark settlement as completed")
                }
            }
        }
    }
} 